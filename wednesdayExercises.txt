Individuella eller parkodnings √∂vningar:

üíæ Kom ih√•g: Testa endpoints i Postman

üßµ Tips

Anv√§nd console.log(req.body) f√∂r att se vad som skickas

I Postman: Kom ih√•g att anv√§nda Headers -> Content-Type: application/json

Se till att starta om servern n√§r du g√∂r kod√§ndringar (eller anv√§nd nodemon eller --watch flaggan)

------------------------------------------
üß© L√§tta √ñvningar:

1: /api/welcome ‚Äì Returnera en h√§lsning med res.header():

-------------------------------------------
2: /api/headers ‚Äì Returnera alla inkommande headers.

-------------------------------------------
3:  /api/name
Skapa en ny route som returnerar ditt namn.

-------------------------------------------
4:  /api/greet/:name
Anv√§nd req.params f√∂r att returnera ett personligt meddelande.

// GET /api/greet/Alice
res.json({ message: `Hej ${req.params.name}!` });

-------------------------------------------
5:  /api/greet
Anv√§nd req.query f√∂r att h√§mta ett namn via ?name=Mandus och svara med:
{ "message": "Hej, Mandus!" }

-------------------------------------------
-------------------------------------------
-------------------------------------------
üîß Medelsv√•ra √ñvningar 

6: Skapa en PATCH-route

Uppdatera endast namn p√• en anv√§ndare

-------------------------------------------
7: /api/products
Skapa ett memory-baserat produkt-API. L√§gg in en h√•rdkodad array med produkter.

const products = [
  { id: 1, name: 'Penna', price: 10 },
  { id: 2, name: 'Blyertspenna', price: 5 }
];

GET /api/products ‚Üí returnerar hela listan

GET /api/products/:id ‚Üí returnerar en produkt med matchande id

-------------------------------------------
8: /api/products?sort=name

Anv√§nd req.query.sort f√∂r att sortera produkterna p√• name eller price.

-------------------------------------------
9: /api/products (POST)

L√§gg till en ny produkt till listan via req.body.

Om name eller price saknas ‚Äì returnera status 400.

-------------------------------------------
10: /api/products/:id (PUT)

Uppdatera en befintlig produkt baserat p√• id.

-------------------------------------------
11:  /api/products/:id (DELETE)

Ta bort en produkt med specifikt id. Returnera ny uppdaterad lista.

-------------------------------------------
-------------------------------------------
-------------------------------------------
üöÄ Sv√•ra √ñvningar

12:  /api/validate-name

Skapa en POST-route d√§r anv√§ndaren skickar in { "name": "Bo" }.

Om namnet √§r minst 3 tecken: 200 OK

Om kortare: 400 Bad Request + error

-------------------------------------------
13:  /api/ping
Returnera ett svar med statuskod 200 och en custom header:
res.setHeader("X-Server-Status", "active");
res.status(200).json({ message: "Pong!" });

-------------------------------------------
14:  Statuskod-√∂vning med kontroll

Skapa en GET-route /api/check/:value d√§r du:

Returnerar 200 OK om value === "ok"

Annars returnerar 400 eller 404

-------------------------------------------
15: Bygg ut anv√§ndar-CRUD med validering i route

Skapa POST /api/users som:

Kollar att name finns i req.body

Om inte: returnerar 400

Om ok: skapar anv√§ndare

-------------------------------------------
16: CRUD med nested data
L√§gg till en "pets"-array till varje anv√§ndare:

{ "id": 1, "name": "Alice", "pets": [{ "type": "dog", "name": "Tirre" }] }

L√§gg till endpoints:

POST /api/users/:id/pets

GET /api/users/:id/pets

-------------------------------------------
17:  /api/products/stats
Skapa en route som returnerar statistik √∂ver produkterna:
{
  "totalProducts": 5,
  "averagePrice": 12.5
}

(Bra √∂vning i att loopa igenom products och returnera ett samlat svar.)

-------------------------------------------
-------------------------------------------
-------------------------------------------
‚úÖ Reflektion och Avslutning
- Hur s√§kerst√§ller vi att v√•ra endpoints returnerar r√§tt kod och svar?

- Vad kan vi f√∂rb√§ttra i v√•r API-design?

- Hur kan detta kopplas till riktiga backend-projekt?